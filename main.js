/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OthTool
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_fs = require("fs");
var DEFAULT_SETTINGS = {
  pythonPath: "python3",
  othToolPath: "",
  mensaplanFile: "Mensaplan.md",
  cloneRepo: false,
  autoOpen: true,
  fetchOnFirstOpen: false
};
var OthTool = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.oth_tool_repo_url = "https://github.com/Acoiny/oth-scrape-tool";
  }
  async onload() {
    await this.loadSettings();
    let vaultPath = "";
    if (this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
      vaultPath = this.app.vault.adapter.getBasePath();
    }
    this.vault_base_path = vaultPath;
    this.oth_tool_repo_path = vaultPath + "/" + this.manifest.dir + "/oth-scrape-tool";
    if (this.settings.cloneRepo) {
      this.updateRepo();
    }
    if (this.settings.fetchOnFirstOpen) {
      (0, import_fs.stat)(this.vault_base_path + "/" + this.settings.mensaplanFile, (err, stats) => {
        if (err) {
          console.log(err);
          this.fetchMensaplan();
          return;
        }
        const today = new Date();
        const acc = stats.mtime;
        if (!(today.getFullYear() == acc.getFullYear() && today.getMonth() == acc.getMonth() && today.getDate() == acc.getDate())) {
          this.fetchMensaplan();
        }
      });
    }
    this.addCommand({
      id: "fetch-oth-mensaplan",
      name: "Fetch OTH-Mensaplan",
      callback: () => {
        this.fetchMensaplan();
      }
    });
    this.addCommand({
      id: "clone-oth-scrape-tool",
      name: "Clone the oth-scrape-tool",
      callback: () => {
        this.updateRepo();
      }
    });
    this.addCommand({
      id: "remove-oth-scrape-tool",
      name: "Remove the cloned oth-scrape-tool",
      callback: () => {
        if ((0, import_fs.existsSync)(this.oth_tool_repo_path)) {
          (0, import_fs.rm)(this.oth_tool_repo_path, { force: true, recursive: true }, (error) => {
            if (error)
              new OthToolModal(this.app, `Unable to remove tool: ${error}`).open();
          });
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  /**
   * Executes git pull inside the repo,
   * or freshly clones it if it isn't present
   */
  updateRepo() {
    if (!(0, import_fs.existsSync)(this.oth_tool_repo_path)) {
      this.cloneRepoIfNotExists();
      return;
    }
    const cmd = `cd ${this.oth_tool_repo_path} && git pull`;
    console.log(cmd);
    (0, import_child_process.exec)(cmd, (error, stdout, stderr) => {
      if (error) {
        new OthToolModal(this.app, `Error git pull: ${error}`).open();
        return;
      }
      console.log(stdout);
      if (stderr)
        console.error(stderr);
    });
  }
  cloneRepoIfNotExists() {
    if ((0, import_fs.existsSync)(this.oth_tool_repo_path))
      return;
    const cmd = `git clone ${this.oth_tool_repo_url} ${this.oth_tool_repo_path}`;
    (0, import_child_process.exec)(cmd, (error, stdout, stderr) => {
      if (error) {
        new OthToolModal(this.app, `Error on clone: ${error}`).open();
        return;
      }
      console.log(stdout);
      if (stderr)
        console.error(stderr);
    });
  }
  fetchMensaplan() {
    const pythonPath = this.settings.pythonPath;
    const mensaplan = this.settings.mensaplanFile.endsWith(".md") ? this.settings.mensaplanFile : this.settings.mensaplanFile + ".md";
    const cmd = `"${pythonPath}" "${this.oth_tool_repo_path + "/oth_tool.py"}" m -mt > "${this.vault_base_path + "/" + mensaplan}"`;
    console.log("Executing: ", cmd);
    (0, import_child_process.exec)(cmd, (error, stdout, stderr) => {
      if (error) {
        new OthToolModal(this.app, `Error on getting mensaplan: ${error}`).open();
        return;
      }
      console.log(stdout);
      if (stderr)
        console.error(stderr);
      if (this.settings.autoOpen) {
        const file = this.app.vault.getAbstractFileByPath(this.settings.mensaplanFile);
        if (file)
          this.app.workspace.openLinkText(this.settings.mensaplanFile, "", false);
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var OthToolModal = class extends import_obsidian.Modal {
  constructor(app, message) {
    super(app);
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.message);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Python path").setDesc("Path to the python interpreter used to fetch the 				mensaplan. Can be inside a virtual environment (Recommended).").addText((text) => text.setPlaceholder("/path/to/python3").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Clone tool").setDesc("Automatically clone and pull new versions of the the oth-tool into this plugin's folder").addToggle((cp) => cp.setValue(this.plugin.settings.cloneRepo).onChange(async (value) => {
      this.plugin.settings.cloneRepo = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Auto open").setDesc("Automatically open the mensaplan after fetching it").addToggle((cp) => cp.setValue(this.plugin.settings.autoOpen).onChange(async (value) => {
      this.plugin.settings.autoOpen = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Fetch on open").setDesc("Fetches the mensaplan if no Mensaplan file from today has been found on opening obsidian").addToggle((cp) => cp.setValue(this.plugin.settings.fetchOnFirstOpen).onChange(async (value) => {
      this.plugin.settings.fetchOnFirstOpen = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Mensaplan.md").setDesc("Path to store the mensaplan inside the vault.").addText((text) => text.setPlaceholder("Mensaplan.md").setValue(this.plugin.settings.mensaplanFile).onChange(async (value) => {
      this.plugin.settings.mensaplanFile = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
